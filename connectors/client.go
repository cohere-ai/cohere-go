// This file was auto-generated by Fern from our API Definition.

package connectors

import (
	context "context"
	v3 "github.com/cohere-ai/cohere-go/v3"
	core "github.com/cohere-ai/cohere-go/v3/core"
	internal "github.com/cohere-ai/cohere-go/v3/internal"
	option "github.com/cohere-ai/cohere-go/v3/option"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("CO_API_KEY")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Returns a list of connectors ordered by descending creation date (newer first). See ['Managing your Connector'](https://docs.cohere.com/docs/managing-your-connector) for more information.
func (c *Client) List(
	ctx context.Context,
	request *v3.ConnectorsListRequest,
	opts ...option.RequestOption,
) (*v3.ListConnectorsResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.cohere.com",
	)
	endpointURL := baseURL + "/v1/connectors"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &v3.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &v3.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &v3.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &v3.NotFoundError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &v3.UnprocessableEntityError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &v3.TooManyRequestsError{
				APIError: apiError,
			}
		},
		498: func(apiError *core.APIError) error {
			return &v3.InvalidTokenError{
				APIError: apiError,
			}
		},
		499: func(apiError *core.APIError) error {
			return &v3.ClientClosedRequestError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &v3.InternalServerError{
				APIError: apiError,
			}
		},
		501: func(apiError *core.APIError) error {
			return &v3.NotImplementedError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &v3.ServiceUnavailableError{
				APIError: apiError,
			}
		},
		504: func(apiError *core.APIError) error {
			return &v3.GatewayTimeoutError{
				APIError: apiError,
			}
		},
	}

	var response *v3.ListConnectorsResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Creates a new connector. The connector is tested during registration and will cancel registration when the test is unsuccessful. See ['Creating and Deploying a Connector'](https://docs.cohere.com/v1/docs/creating-and-deploying-a-connector) for more information.
func (c *Client) Create(
	ctx context.Context,
	request *v3.CreateConnectorRequest,
	opts ...option.RequestOption,
) (*v3.CreateConnectorResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.cohere.com",
	)
	endpointURL := baseURL + "/v1/connectors"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &v3.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &v3.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &v3.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &v3.NotFoundError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &v3.UnprocessableEntityError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &v3.TooManyRequestsError{
				APIError: apiError,
			}
		},
		498: func(apiError *core.APIError) error {
			return &v3.InvalidTokenError{
				APIError: apiError,
			}
		},
		499: func(apiError *core.APIError) error {
			return &v3.ClientClosedRequestError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &v3.InternalServerError{
				APIError: apiError,
			}
		},
		501: func(apiError *core.APIError) error {
			return &v3.NotImplementedError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &v3.ServiceUnavailableError{
				APIError: apiError,
			}
		},
		504: func(apiError *core.APIError) error {
			return &v3.GatewayTimeoutError{
				APIError: apiError,
			}
		},
	}

	var response *v3.CreateConnectorResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieve a connector by ID. See ['Connectors'](https://docs.cohere.com/docs/connectors) for more information.
func (c *Client) Get(
	ctx context.Context,
	// The ID of the connector to retrieve.
	id string,
	opts ...option.RequestOption,
) (*v3.GetConnectorResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.cohere.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/connectors/%v",
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &v3.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &v3.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &v3.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &v3.NotFoundError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &v3.UnprocessableEntityError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &v3.TooManyRequestsError{
				APIError: apiError,
			}
		},
		498: func(apiError *core.APIError) error {
			return &v3.InvalidTokenError{
				APIError: apiError,
			}
		},
		499: func(apiError *core.APIError) error {
			return &v3.ClientClosedRequestError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &v3.InternalServerError{
				APIError: apiError,
			}
		},
		501: func(apiError *core.APIError) error {
			return &v3.NotImplementedError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &v3.ServiceUnavailableError{
				APIError: apiError,
			}
		},
		504: func(apiError *core.APIError) error {
			return &v3.GatewayTimeoutError{
				APIError: apiError,
			}
		},
	}

	var response *v3.GetConnectorResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Delete a connector by ID. See ['Connectors'](https://docs.cohere.com/docs/connectors) for more information.
func (c *Client) Delete(
	ctx context.Context,
	// The ID of the connector to delete.
	id string,
	opts ...option.RequestOption,
) (v3.DeleteConnectorResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.cohere.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/connectors/%v",
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &v3.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &v3.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &v3.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &v3.NotFoundError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &v3.UnprocessableEntityError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &v3.TooManyRequestsError{
				APIError: apiError,
			}
		},
		498: func(apiError *core.APIError) error {
			return &v3.InvalidTokenError{
				APIError: apiError,
			}
		},
		499: func(apiError *core.APIError) error {
			return &v3.ClientClosedRequestError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &v3.InternalServerError{
				APIError: apiError,
			}
		},
		501: func(apiError *core.APIError) error {
			return &v3.NotImplementedError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &v3.ServiceUnavailableError{
				APIError: apiError,
			}
		},
		504: func(apiError *core.APIError) error {
			return &v3.GatewayTimeoutError{
				APIError: apiError,
			}
		},
	}

	var response v3.DeleteConnectorResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Update a connector by ID. Omitted fields will not be updated. See ['Managing your Connector'](https://docs.cohere.com/docs/managing-your-connector) for more information.
func (c *Client) Update(
	ctx context.Context,
	// The ID of the connector to update.
	id string,
	request *v3.UpdateConnectorRequest,
	opts ...option.RequestOption,
) (*v3.UpdateConnectorResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.cohere.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/connectors/%v",
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &v3.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &v3.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &v3.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &v3.NotFoundError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &v3.UnprocessableEntityError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &v3.TooManyRequestsError{
				APIError: apiError,
			}
		},
		498: func(apiError *core.APIError) error {
			return &v3.InvalidTokenError{
				APIError: apiError,
			}
		},
		499: func(apiError *core.APIError) error {
			return &v3.ClientClosedRequestError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &v3.InternalServerError{
				APIError: apiError,
			}
		},
		501: func(apiError *core.APIError) error {
			return &v3.NotImplementedError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &v3.ServiceUnavailableError{
				APIError: apiError,
			}
		},
		504: func(apiError *core.APIError) error {
			return &v3.GatewayTimeoutError{
				APIError: apiError,
			}
		},
	}

	var response *v3.UpdateConnectorResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPatch,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Authorize the connector with the given ID for the connector oauth app.  See ['Connector Authentication'](https://docs.cohere.com/docs/connector-authentication) for more information.
func (c *Client) OAuthAuthorize(
	ctx context.Context,
	// The ID of the connector to authorize.
	id string,
	request *v3.ConnectorsOAuthAuthorizeRequest,
	opts ...option.RequestOption,
) (*v3.OAuthAuthorizeResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.cohere.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/connectors/%v/oauth/authorize",
		id,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &v3.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &v3.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &v3.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &v3.NotFoundError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &v3.UnprocessableEntityError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &v3.TooManyRequestsError{
				APIError: apiError,
			}
		},
		498: func(apiError *core.APIError) error {
			return &v3.InvalidTokenError{
				APIError: apiError,
			}
		},
		499: func(apiError *core.APIError) error {
			return &v3.ClientClosedRequestError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &v3.InternalServerError{
				APIError: apiError,
			}
		},
		501: func(apiError *core.APIError) error {
			return &v3.NotImplementedError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &v3.ServiceUnavailableError{
				APIError: apiError,
			}
		},
		504: func(apiError *core.APIError) error {
			return &v3.GatewayTimeoutError{
				APIError: apiError,
			}
		},
	}

	var response *v3.OAuthAuthorizeResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
