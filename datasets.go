// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/cohere-ai/cohere-go/v2/core"
	time "time"
)

type DatasetsListRequest struct {
	// optional filter by dataset type
	DatasetType *string `json:"-"`
	// optional filter before a date
	Before *time.Time `json:"-"`
	// optional filter after a date
	After *time.Time `json:"-"`
	// optional limit to number of results
	Limit *string `json:"-"`
	// optional offset to start of results
	Offset *string `json:"-"`
}

type DatasetsGetResponse struct {
	Dataset *Dataset `json:"dataset,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DatasetsGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DatasetsGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DatasetsGetResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DatasetsGetResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DatasetsGetUsageResponse struct {
	// The total number of bytes used by the organization.
	OrganizationUsage *string `json:"organizationUsage,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DatasetsGetUsageResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DatasetsGetUsageResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DatasetsGetUsageResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DatasetsGetUsageResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DatasetsListResponse struct {
	Datasets []*Dataset `json:"datasets,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DatasetsListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DatasetsListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DatasetsListResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DatasetsListResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}
