// This file was auto-generated by Fern from our API Definition.

package datasets

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	v2 "github.com/cohere-ai/cohere-go/v2"
	core "github.com/cohere-ai/cohere-go/v2/core"
	option "github.com/cohere-ai/cohere-go/v2/option"
	io "io"
	multipart "mime/multipart"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// List datasets that have been created.
func (c *Client) List(
	ctx context.Context,
	request *v2.DatasetsListRequest,
	opts ...option.RequestOption,
) (*v2.DatasetsListResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.cohere.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/" + "v1/datasets"

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *v2.DatasetsListResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Create a dataset by uploading a file. See ['Dataset Creation'](https://docs.cohere.com/docs/datasets#dataset-creation) for more information.
func (c *Client) Create(
	ctx context.Context,
	data io.Reader,
	evalData io.Reader,
	request *v2.DatasetsCreateRequest,
	opts ...option.RequestOption,
) (*v2.DatasetsCreateResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.cohere.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/" + "v1/datasets"

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *v2.DatasetsCreateResponse
	requestBuffer := bytes.NewBuffer(nil)
	writer := multipart.NewWriter(requestBuffer)
	dataFilename := "data_filename"
	if named, ok := data.(interface{ Name() string }); ok {
		dataFilename = named.Name()
	}
	dataPart, err := writer.CreateFormFile("data", dataFilename)
	if err != nil {
		return nil, err
	}
	if _, err := io.Copy(dataPart, data); err != nil {
		return nil, err
	}
	evalDataFilename := "evalData_filename"
	if named, ok := evalData.(interface{ Name() string }); ok {
		evalDataFilename = named.Name()
	}
	evalDataPart, err := writer.CreateFormFile("eval_data", evalDataFilename)
	if err != nil {
		return nil, err
	}
	if _, err := io.Copy(evalDataPart, evalData); err != nil {
		return nil, err
	}
	if err := writer.Close(); err != nil {
		return nil, err
	}
	headers.Set("Content-Type", writer.FormDataContentType())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     requestBuffer,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// View the dataset storage usage for your Organization. Each Organization can have up to 10GB of storage across all their users.
func (c *Client) GetUsage(
	ctx context.Context,
	opts ...option.RequestOption,
) (*v2.DatasetsGetUsageResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.cohere.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/" + "v1/datasets/usage"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *v2.DatasetsGetUsageResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieve a dataset by ID. See ['Datasets'](https://docs.cohere.com/docs/datasets) for more information.
func (c *Client) Get(
	ctx context.Context,
	id string,
	opts ...option.RequestOption,
) (*v2.DatasetsGetResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.cohere.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/datasets/%v", id)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *v2.DatasetsGetResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Delete a dataset by ID. Datasets are automatically deleted after 30 days, but they can also be deleted manually.
func (c *Client) Delete(
	ctx context.Context,
	id string,
	opts ...option.RequestOption,
) (map[string]interface{}, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.cohere.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/datasets/%v", id)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response map[string]interface{}
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodDelete,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
