// Code generated by Fern. DO NOT EDIT.

package finetuning

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/cohere-ai/cohere-go/v3/internal"
	time "time"
)

// The base model used for fine-tuning.
type BaseModel struct {
	// The name of the base model.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// read-only. The version of the base model.
	Version *string `json:"version,omitempty" url:"version,omitempty"`
	// The type of the base model.
	BaseType BaseType `json:"base_type" url:"base_type"`
	// Deprecated: The fine-tuning strategy.
	Strategy *Strategy `json:"strategy,omitempty" url:"strategy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BaseModel) GetName() *string {
	if b == nil {
		return nil
	}
	return b.Name
}

func (b *BaseModel) GetVersion() *string {
	if b == nil {
		return nil
	}
	return b.Version
}

func (b *BaseModel) GetBaseType() BaseType {
	if b == nil {
		return ""
	}
	return b.BaseType
}

func (b *BaseModel) GetStrategy() *Strategy {
	if b == nil {
		return nil
	}
	return b.Strategy
}

func (b *BaseModel) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BaseModel) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseModel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseModel(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BaseModel) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The possible types of fine-tuned models.
//
//   - BASE_TYPE_UNSPECIFIED: Unspecified model.
//   - BASE_TYPE_GENERATIVE: Deprecated: Generative model.
//   - BASE_TYPE_CLASSIFICATION: Classification model.
//   - BASE_TYPE_RERANK: Rerank model.
//   - BASE_TYPE_CHAT: Chat model.
type BaseType string

const (
	BaseTypeBaseTypeUnspecified    BaseType = "BASE_TYPE_UNSPECIFIED"
	BaseTypeBaseTypeGenerative     BaseType = "BASE_TYPE_GENERATIVE"
	BaseTypeBaseTypeClassification BaseType = "BASE_TYPE_CLASSIFICATION"
	BaseTypeBaseTypeRerank         BaseType = "BASE_TYPE_RERANK"
	BaseTypeBaseTypeChat           BaseType = "BASE_TYPE_CHAT"
)

func NewBaseTypeFromString(s string) (BaseType, error) {
	switch s {
	case "BASE_TYPE_UNSPECIFIED":
		return BaseTypeBaseTypeUnspecified, nil
	case "BASE_TYPE_GENERATIVE":
		return BaseTypeBaseTypeGenerative, nil
	case "BASE_TYPE_CLASSIFICATION":
		return BaseTypeBaseTypeClassification, nil
	case "BASE_TYPE_RERANK":
		return BaseTypeBaseTypeRerank, nil
	case "BASE_TYPE_CHAT":
		return BaseTypeBaseTypeChat, nil
	}
	var t BaseType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BaseType) Ptr() *BaseType {
	return &b
}

// Response to request to create a fine-tuned model.
type CreateFinetunedModelResponse struct {
	// Information about the fine-tuned model.
	FinetunedModel *FinetunedModel `json:"finetuned_model,omitempty" url:"finetuned_model,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateFinetunedModelResponse) GetFinetunedModel() *FinetunedModel {
	if c == nil {
		return nil
	}
	return c.FinetunedModel
}

func (c *CreateFinetunedModelResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateFinetunedModelResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateFinetunedModelResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateFinetunedModelResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateFinetunedModelResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Response to request to delete a fine-tuned model.
type DeleteFinetunedModelResponse = map[string]interface{}

// A change in status of a fine-tuned model.
type Event struct {
	// ID of the user who initiated the event. Empty if initiated by the system.
	UserId *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	// Status of the fine-tuned model.
	Status *Status `json:"status,omitempty" url:"status,omitempty"`
	// Timestamp when the event happened.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *Event) GetUserId() *string {
	if e == nil {
		return nil
	}
	return e.UserId
}

func (e *Event) GetStatus() *Status {
	if e == nil {
		return nil
	}
	return e.Status
}

func (e *Event) GetCreatedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *Event) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Event) UnmarshalJSON(data []byte) error {
	type embed Event
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = Event(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *Event) MarshalJSON() ([]byte, error) {
	type embed Event
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*e),
		CreatedAt: internal.NewOptionalDateTime(e.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *Event) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// This resource represents a fine-tuned model.
type FinetunedModel struct {
	// read-only. FinetunedModel ID.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// FinetunedModel name (e.g. `foobar`).
	Name string `json:"name" url:"name"`
	// read-only. User ID of the creator.
	CreatorId *string `json:"creator_id,omitempty" url:"creator_id,omitempty"`
	// read-only. Organization ID.
	OrganizationId *string `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	// FinetunedModel settings such as dataset, hyperparameters...
	Settings *Settings `json:"settings" url:"settings"`
	// read-only. Current stage in the life-cycle of the fine-tuned model.
	Status *Status `json:"status,omitempty" url:"status,omitempty"`
	// read-only. Creation timestamp.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// read-only. Latest update timestamp.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// read-only. Timestamp for the completed fine-tuning.
	CompletedAt *time.Time `json:"completed_at,omitempty" url:"completed_at,omitempty"`
	// read-only. Deprecated: Timestamp for the latest request to this fine-tuned model.
	LastUsed *time.Time `json:"last_used,omitempty" url:"last_used,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FinetunedModel) GetId() *string {
	if f == nil {
		return nil
	}
	return f.Id
}

func (f *FinetunedModel) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FinetunedModel) GetCreatorId() *string {
	if f == nil {
		return nil
	}
	return f.CreatorId
}

func (f *FinetunedModel) GetOrganizationId() *string {
	if f == nil {
		return nil
	}
	return f.OrganizationId
}

func (f *FinetunedModel) GetSettings() *Settings {
	if f == nil {
		return nil
	}
	return f.Settings
}

func (f *FinetunedModel) GetStatus() *Status {
	if f == nil {
		return nil
	}
	return f.Status
}

func (f *FinetunedModel) GetCreatedAt() *time.Time {
	if f == nil {
		return nil
	}
	return f.CreatedAt
}

func (f *FinetunedModel) GetUpdatedAt() *time.Time {
	if f == nil {
		return nil
	}
	return f.UpdatedAt
}

func (f *FinetunedModel) GetCompletedAt() *time.Time {
	if f == nil {
		return nil
	}
	return f.CompletedAt
}

func (f *FinetunedModel) GetLastUsed() *time.Time {
	if f == nil {
		return nil
	}
	return f.LastUsed
}

func (f *FinetunedModel) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FinetunedModel) UnmarshalJSON(data []byte) error {
	type embed FinetunedModel
	var unmarshaler = struct {
		embed
		CreatedAt   *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt   *internal.DateTime `json:"updated_at,omitempty"`
		CompletedAt *internal.DateTime `json:"completed_at,omitempty"`
		LastUsed    *internal.DateTime `json:"last_used,omitempty"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FinetunedModel(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	f.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	f.CompletedAt = unmarshaler.CompletedAt.TimePtr()
	f.LastUsed = unmarshaler.LastUsed.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FinetunedModel) MarshalJSON() ([]byte, error) {
	type embed FinetunedModel
	var marshaler = struct {
		embed
		CreatedAt   *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt   *internal.DateTime `json:"updated_at,omitempty"`
		CompletedAt *internal.DateTime `json:"completed_at,omitempty"`
		LastUsed    *internal.DateTime `json:"last_used,omitempty"`
	}{
		embed:       embed(*f),
		CreatedAt:   internal.NewOptionalDateTime(f.CreatedAt),
		UpdatedAt:   internal.NewOptionalDateTime(f.UpdatedAt),
		CompletedAt: internal.NewOptionalDateTime(f.CompletedAt),
		LastUsed:    internal.NewOptionalDateTime(f.LastUsed),
	}
	return json.Marshal(marshaler)
}

func (f *FinetunedModel) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// Response to a request to get a fine-tuned model.
type GetFinetunedModelResponse struct {
	// Information about the fine-tuned model.
	FinetunedModel *FinetunedModel `json:"finetuned_model,omitempty" url:"finetuned_model,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetFinetunedModelResponse) GetFinetunedModel() *FinetunedModel {
	if g == nil {
		return nil
	}
	return g.FinetunedModel
}

func (g *GetFinetunedModelResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetFinetunedModelResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetFinetunedModelResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetFinetunedModelResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetFinetunedModelResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// The fine-tuning hyperparameters.
type Hyperparameters struct {
	// Stops training if the loss metric does not improve beyond the value of
	// `early_stopping_threshold` after this many times of evaluation.
	EarlyStoppingPatience *int `json:"early_stopping_patience,omitempty" url:"early_stopping_patience,omitempty"`
	// How much the loss must improve to prevent early stopping.
	EarlyStoppingThreshold *float64 `json:"early_stopping_threshold,omitempty" url:"early_stopping_threshold,omitempty"`
	// The batch size is the number of training examples included in a single
	// training pass.
	TrainBatchSize *int `json:"train_batch_size,omitempty" url:"train_batch_size,omitempty"`
	// The number of epochs to train for.
	TrainEpochs *int `json:"train_epochs,omitempty" url:"train_epochs,omitempty"`
	// The learning rate to be used during training.
	LearningRate *float64 `json:"learning_rate,omitempty" url:"learning_rate,omitempty"`
	// Controls the scaling factor for LoRA updates. Higher values make the
	// updates more impactful.
	LoraAlpha *int `json:"lora_alpha,omitempty" url:"lora_alpha,omitempty"`
	// Specifies the rank for low-rank matrices. Lower ranks reduce parameters
	// but may limit model flexibility.
	LoraRank *int `json:"lora_rank,omitempty" url:"lora_rank,omitempty"`
	// The combination of LoRA modules to target.
	LoraTargetModules *LoraTargetModules `json:"lora_target_modules,omitempty" url:"lora_target_modules,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *Hyperparameters) GetEarlyStoppingPatience() *int {
	if h == nil {
		return nil
	}
	return h.EarlyStoppingPatience
}

func (h *Hyperparameters) GetEarlyStoppingThreshold() *float64 {
	if h == nil {
		return nil
	}
	return h.EarlyStoppingThreshold
}

func (h *Hyperparameters) GetTrainBatchSize() *int {
	if h == nil {
		return nil
	}
	return h.TrainBatchSize
}

func (h *Hyperparameters) GetTrainEpochs() *int {
	if h == nil {
		return nil
	}
	return h.TrainEpochs
}

func (h *Hyperparameters) GetLearningRate() *float64 {
	if h == nil {
		return nil
	}
	return h.LearningRate
}

func (h *Hyperparameters) GetLoraAlpha() *int {
	if h == nil {
		return nil
	}
	return h.LoraAlpha
}

func (h *Hyperparameters) GetLoraRank() *int {
	if h == nil {
		return nil
	}
	return h.LoraRank
}

func (h *Hyperparameters) GetLoraTargetModules() *LoraTargetModules {
	if h == nil {
		return nil
	}
	return h.LoraTargetModules
}

func (h *Hyperparameters) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *Hyperparameters) UnmarshalJSON(data []byte) error {
	type unmarshaler Hyperparameters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = Hyperparameters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *Hyperparameters) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// Response to a request to list events of a fine-tuned model.
type ListEventsResponse struct {
	// List of events for the fine-tuned model.
	Events []*Event `json:"events,omitempty" url:"events,omitempty"`
	// Pagination token to retrieve the next page of results. If the value is "",
	// it means no further results for the request.
	NextPageToken *string `json:"next_page_token,omitempty" url:"next_page_token,omitempty"`
	// Total count of results.
	TotalSize *int `json:"total_size,omitempty" url:"total_size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListEventsResponse) GetEvents() []*Event {
	if l == nil {
		return nil
	}
	return l.Events
}

func (l *ListEventsResponse) GetNextPageToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPageToken
}

func (l *ListEventsResponse) GetTotalSize() *int {
	if l == nil {
		return nil
	}
	return l.TotalSize
}

func (l *ListEventsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEventsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEventsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEventsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEventsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Response to a request to list fine-tuned models.
type ListFinetunedModelsResponse struct {
	// List of fine-tuned models matching the request.
	FinetunedModels []*FinetunedModel `json:"finetuned_models,omitempty" url:"finetuned_models,omitempty"`
	// Pagination token to retrieve the next page of results. If the value is "",
	// it means no further results for the request.
	NextPageToken *string `json:"next_page_token,omitempty" url:"next_page_token,omitempty"`
	// Total count of results.
	TotalSize *int `json:"total_size,omitempty" url:"total_size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListFinetunedModelsResponse) GetFinetunedModels() []*FinetunedModel {
	if l == nil {
		return nil
	}
	return l.FinetunedModels
}

func (l *ListFinetunedModelsResponse) GetNextPageToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPageToken
}

func (l *ListFinetunedModelsResponse) GetTotalSize() *int {
	if l == nil {
		return nil
	}
	return l.TotalSize
}

func (l *ListFinetunedModelsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListFinetunedModelsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFinetunedModelsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFinetunedModelsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFinetunedModelsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Response to a request to list training-step metrics of a fine-tuned model.
type ListTrainingStepMetricsResponse struct {
	// The metrics for each step the evaluation was run on.
	StepMetrics []*TrainingStepMetrics `json:"step_metrics,omitempty" url:"step_metrics,omitempty"`
	// Pagination token to retrieve the next page of results. If the value is "",
	// it means no further results for the request.
	NextPageToken *string `json:"next_page_token,omitempty" url:"next_page_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListTrainingStepMetricsResponse) GetStepMetrics() []*TrainingStepMetrics {
	if l == nil {
		return nil
	}
	return l.StepMetrics
}

func (l *ListTrainingStepMetricsResponse) GetNextPageToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPageToken
}

func (l *ListTrainingStepMetricsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListTrainingStepMetricsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListTrainingStepMetricsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListTrainingStepMetricsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListTrainingStepMetricsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// The possible combinations of LoRA modules to target.
//
//   - LORA_TARGET_MODULES_UNSPECIFIED: Unspecified LoRA target modules.
//   - LORA_TARGET_MODULES_QV: LoRA adapts the query and value matrices in transformer attention layers.
//   - LORA_TARGET_MODULES_QKVO: LoRA adapts query, key, value, and output matrices in attention layers.
//   - LORA_TARGET_MODULES_QKVO_FFN: LoRA adapts attention projection matrices and feed-forward networks (FFN).
type LoraTargetModules string

const (
	LoraTargetModulesLoraTargetModulesUnspecified LoraTargetModules = "LORA_TARGET_MODULES_UNSPECIFIED"
	LoraTargetModulesLoraTargetModulesQv          LoraTargetModules = "LORA_TARGET_MODULES_QV"
	LoraTargetModulesLoraTargetModulesQkvo        LoraTargetModules = "LORA_TARGET_MODULES_QKVO"
	LoraTargetModulesLoraTargetModulesQkvoFfn     LoraTargetModules = "LORA_TARGET_MODULES_QKVO_FFN"
)

func NewLoraTargetModulesFromString(s string) (LoraTargetModules, error) {
	switch s {
	case "LORA_TARGET_MODULES_UNSPECIFIED":
		return LoraTargetModulesLoraTargetModulesUnspecified, nil
	case "LORA_TARGET_MODULES_QV":
		return LoraTargetModulesLoraTargetModulesQv, nil
	case "LORA_TARGET_MODULES_QKVO":
		return LoraTargetModulesLoraTargetModulesQkvo, nil
	case "LORA_TARGET_MODULES_QKVO_FFN":
		return LoraTargetModulesLoraTargetModulesQkvoFfn, nil
	}
	var t LoraTargetModules
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LoraTargetModules) Ptr() *LoraTargetModules {
	return &l
}

// The configuration used for fine-tuning.
type Settings struct {
	// The base model to fine-tune.
	BaseModel *BaseModel `json:"base_model" url:"base_model"`
	// The data used for training and evaluating the fine-tuned model.
	DatasetId string `json:"dataset_id" url:"dataset_id"`
	// Fine-tuning hyper-parameters.
	Hyperparameters *Hyperparameters `json:"hyperparameters,omitempty" url:"hyperparameters,omitempty"`
	// read-only. Whether the model is single-label or multi-label (only for classification).
	MultiLabel *bool `json:"multi_label,omitempty" url:"multi_label,omitempty"`
	// The Weights & Biases configuration (Chat fine-tuning only).
	Wandb *WandbConfig `json:"wandb,omitempty" url:"wandb,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *Settings) GetBaseModel() *BaseModel {
	if s == nil {
		return nil
	}
	return s.BaseModel
}

func (s *Settings) GetDatasetId() string {
	if s == nil {
		return ""
	}
	return s.DatasetId
}

func (s *Settings) GetHyperparameters() *Hyperparameters {
	if s == nil {
		return nil
	}
	return s.Hyperparameters
}

func (s *Settings) GetMultiLabel() *bool {
	if s == nil {
		return nil
	}
	return s.MultiLabel
}

func (s *Settings) GetWandb() *WandbConfig {
	if s == nil {
		return nil
	}
	return s.Wandb
}

func (s *Settings) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Settings) UnmarshalJSON(data []byte) error {
	type unmarshaler Settings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Settings(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *Settings) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The possible stages of a fine-tuned model life-cycle.
//
//   - STATUS_UNSPECIFIED: Unspecified status.
//   - STATUS_FINETUNING: The fine-tuned model is being fine-tuned.
//   - STATUS_DEPLOYING_API: Deprecated: The fine-tuned model is being deployed.
//   - STATUS_READY: The fine-tuned model is ready to receive requests.
//   - STATUS_FAILED: The fine-tuned model failed.
//   - STATUS_DELETED: The fine-tuned model was deleted.
//   - STATUS_TEMPORARILY_OFFLINE: Deprecated: The fine-tuned model is temporarily unavailable.
//   - STATUS_PAUSED: Deprecated: The fine-tuned model is paused (Vanilla only).
//   - STATUS_QUEUED: The fine-tuned model is queued for training.
type Status string

const (
	StatusStatusUnspecified        Status = "STATUS_UNSPECIFIED"
	StatusStatusFinetuning         Status = "STATUS_FINETUNING"
	StatusStatusDeployingApi       Status = "STATUS_DEPLOYING_API"
	StatusStatusReady              Status = "STATUS_READY"
	StatusStatusFailed             Status = "STATUS_FAILED"
	StatusStatusDeleted            Status = "STATUS_DELETED"
	StatusStatusTemporarilyOffline Status = "STATUS_TEMPORARILY_OFFLINE"
	StatusStatusPaused             Status = "STATUS_PAUSED"
	StatusStatusQueued             Status = "STATUS_QUEUED"
)

func NewStatusFromString(s string) (Status, error) {
	switch s {
	case "STATUS_UNSPECIFIED":
		return StatusStatusUnspecified, nil
	case "STATUS_FINETUNING":
		return StatusStatusFinetuning, nil
	case "STATUS_DEPLOYING_API":
		return StatusStatusDeployingApi, nil
	case "STATUS_READY":
		return StatusStatusReady, nil
	case "STATUS_FAILED":
		return StatusStatusFailed, nil
	case "STATUS_DELETED":
		return StatusStatusDeleted, nil
	case "STATUS_TEMPORARILY_OFFLINE":
		return StatusStatusTemporarilyOffline, nil
	case "STATUS_PAUSED":
		return StatusStatusPaused, nil
	case "STATUS_QUEUED":
		return StatusStatusQueued, nil
	}
	var t Status
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s Status) Ptr() *Status {
	return &s
}

// The possible strategy used to serve a fine-tuned models.
//
//   - STRATEGY_UNSPECIFIED: Unspecified strategy.
//   - STRATEGY_VANILLA: Deprecated: Serve the fine-tuned model on a dedicated GPU.
//   - STRATEGY_TFEW: Deprecated: Serve the fine-tuned model on a shared GPU.
type Strategy string

const (
	StrategyStrategyUnspecified Strategy = "STRATEGY_UNSPECIFIED"
	StrategyStrategyVanilla     Strategy = "STRATEGY_VANILLA"
	StrategyStrategyTfew        Strategy = "STRATEGY_TFEW"
)

func NewStrategyFromString(s string) (Strategy, error) {
	switch s {
	case "STRATEGY_UNSPECIFIED":
		return StrategyStrategyUnspecified, nil
	case "STRATEGY_VANILLA":
		return StrategyStrategyVanilla, nil
	case "STRATEGY_TFEW":
		return StrategyStrategyTfew, nil
	}
	var t Strategy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s Strategy) Ptr() *Strategy {
	return &s
}

// The evaluation metrics at a given step of the training of a fine-tuned model.
type TrainingStepMetrics struct {
	// Creation timestamp.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// Step number.
	StepNumber *int `json:"step_number,omitempty" url:"step_number,omitempty"`
	// Map of names and values for each evaluation metrics.
	Metrics map[string]float64 `json:"metrics,omitempty" url:"metrics,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TrainingStepMetrics) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TrainingStepMetrics) GetStepNumber() *int {
	if t == nil {
		return nil
	}
	return t.StepNumber
}

func (t *TrainingStepMetrics) GetMetrics() map[string]float64 {
	if t == nil {
		return nil
	}
	return t.Metrics
}

func (t *TrainingStepMetrics) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TrainingStepMetrics) UnmarshalJSON(data []byte) error {
	type embed TrainingStepMetrics
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TrainingStepMetrics(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TrainingStepMetrics) MarshalJSON() ([]byte, error) {
	type embed TrainingStepMetrics
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*t),
		CreatedAt: internal.NewOptionalDateTime(t.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TrainingStepMetrics) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Response to a request to update a fine-tuned model.
type UpdateFinetunedModelResponse struct {
	// Information about the fine-tuned model.
	FinetunedModel *FinetunedModel `json:"finetuned_model,omitempty" url:"finetuned_model,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateFinetunedModelResponse) GetFinetunedModel() *FinetunedModel {
	if u == nil {
		return nil
	}
	return u.FinetunedModel
}

func (u *UpdateFinetunedModelResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateFinetunedModelResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateFinetunedModelResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateFinetunedModelResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateFinetunedModelResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// The Weights & Biases configuration.
type WandbConfig struct {
	// The WandB project name to be used during training.
	Project string `json:"project" url:"project"`
	// The WandB API key to be used during training.
	ApiKey string `json:"api_key" url:"api_key"`
	// The WandB entity name to be used during training.
	Entity *string `json:"entity,omitempty" url:"entity,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WandbConfig) GetProject() string {
	if w == nil {
		return ""
	}
	return w.Project
}

func (w *WandbConfig) GetApiKey() string {
	if w == nil {
		return ""
	}
	return w.ApiKey
}

func (w *WandbConfig) GetEntity() *string {
	if w == nil {
		return nil
	}
	return w.Entity
}

func (w *WandbConfig) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WandbConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler WandbConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WandbConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WandbConfig) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
