// Code generated by Fern. DO NOT EDIT.

package v2

import (
	context "context"
	v2 "github.com/cohere-ai/cohere-go/v2"
	core "github.com/cohere-ai/cohere-go/v2/core"
	internal "github.com/cohere-ai/cohere-go/v2/internal"
	option "github.com/cohere-ai/cohere-go/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("CO_API_KEY")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Generates a text response to a user message. To learn how to use the Chat API and RAG follow our [Text Generation guides](https://docs.cohere.com/v2/docs/chat-api).
//
// Follow the [Migration Guide](https://docs.cohere.com/v2/docs/migrating-v1-to-v2) for instructions on moving from API v1 to API v2.
func (c *Client) ChatStream(
	ctx context.Context,
	request *v2.V2ChatStreamRequest,
	opts ...option.RequestOption,
) (*core.Stream[v2.StreamedChatResponseV2], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.cohere.com",
	)
	endpointURL := baseURL + "/v2/chat"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Accept", "text/event-stream")
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &v2.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &v2.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &v2.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &v2.NotFoundError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &v2.UnprocessableEntityError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &v2.TooManyRequestsError{
				APIError: apiError,
			}
		},
		498: func(apiError *core.APIError) error {
			return &v2.InvalidTokenError{
				APIError: apiError,
			}
		},
		499: func(apiError *core.APIError) error {
			return &v2.ClientClosedRequestError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &v2.InternalServerError{
				APIError: apiError,
			}
		},
		501: func(apiError *core.APIError) error {
			return &v2.NotImplementedError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &v2.ServiceUnavailableError{
				APIError: apiError,
			}
		},
		504: func(apiError *core.APIError) error {
			return &v2.GatewayTimeoutError{
				APIError: apiError,
			}
		},
	}

	streamer := internal.NewStreamer[v2.StreamedChatResponseV2](c.caller)
	return streamer.Stream(
		ctx,
		&internal.StreamParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			Prefix:          internal.DefaultSSEDataPrefix,
			Terminator:      internal.DefaultSSETerminator,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
}

// Generates a text response to a user message and streams it down, token by token. To learn how to use the Chat API with streaming follow our [Text Generation guides](https://docs.cohere.com/v2/docs/chat-api).
//
// Follow the [Migration Guide](https://docs.cohere.com/v2/docs/migrating-v1-to-v2) for instructions on moving from API v1 to API v2.
func (c *Client) Chat(
	ctx context.Context,
	request *v2.V2ChatRequest,
	opts ...option.RequestOption,
) (*v2.ChatResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.cohere.com",
	)
	endpointURL := baseURL + "/v2/chat"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &v2.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &v2.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &v2.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &v2.NotFoundError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &v2.UnprocessableEntityError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &v2.TooManyRequestsError{
				APIError: apiError,
			}
		},
		498: func(apiError *core.APIError) error {
			return &v2.InvalidTokenError{
				APIError: apiError,
			}
		},
		499: func(apiError *core.APIError) error {
			return &v2.ClientClosedRequestError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &v2.InternalServerError{
				APIError: apiError,
			}
		},
		501: func(apiError *core.APIError) error {
			return &v2.NotImplementedError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &v2.ServiceUnavailableError{
				APIError: apiError,
			}
		},
		504: func(apiError *core.APIError) error {
			return &v2.GatewayTimeoutError{
				APIError: apiError,
			}
		},
	}

	var response *v2.ChatResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// This endpoint returns text embeddings. An embedding is a list of floating point numbers that captures semantic information about the text that it represents.
//
// Embeddings can be used to create text classifiers as well as empower semantic search. To learn more about embeddings, see the embedding page.
//
// If you want to learn more how to use the embedding model, have a look at the [Semantic Search Guide](https://docs.cohere.com/docs/semantic-search).
func (c *Client) Embed(
	ctx context.Context,
	request *v2.V2EmbedRequest,
	opts ...option.RequestOption,
) (*v2.EmbedByTypeResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.cohere.com",
	)
	endpointURL := baseURL + "/v2/embed"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &v2.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &v2.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &v2.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &v2.NotFoundError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &v2.UnprocessableEntityError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &v2.TooManyRequestsError{
				APIError: apiError,
			}
		},
		498: func(apiError *core.APIError) error {
			return &v2.InvalidTokenError{
				APIError: apiError,
			}
		},
		499: func(apiError *core.APIError) error {
			return &v2.ClientClosedRequestError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &v2.InternalServerError{
				APIError: apiError,
			}
		},
		501: func(apiError *core.APIError) error {
			return &v2.NotImplementedError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &v2.ServiceUnavailableError{
				APIError: apiError,
			}
		},
		504: func(apiError *core.APIError) error {
			return &v2.GatewayTimeoutError{
				APIError: apiError,
			}
		},
	}

	var response *v2.EmbedByTypeResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// This endpoint takes in a query and a list of texts and produces an ordered array with each text assigned a relevance score.
func (c *Client) Rerank(
	ctx context.Context,
	request *v2.V2RerankRequest,
	opts ...option.RequestOption,
) (*v2.V2RerankResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.cohere.com",
	)
	endpointURL := baseURL + "/v2/rerank"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &v2.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &v2.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &v2.ForbiddenError{
				APIError: apiError,
			}
		},
		404: func(apiError *core.APIError) error {
			return &v2.NotFoundError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &v2.UnprocessableEntityError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &v2.TooManyRequestsError{
				APIError: apiError,
			}
		},
		498: func(apiError *core.APIError) error {
			return &v2.InvalidTokenError{
				APIError: apiError,
			}
		},
		499: func(apiError *core.APIError) error {
			return &v2.ClientClosedRequestError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &v2.InternalServerError{
				APIError: apiError,
			}
		},
		501: func(apiError *core.APIError) error {
			return &v2.NotImplementedError{
				APIError: apiError,
			}
		},
		503: func(apiError *core.APIError) error {
			return &v2.ServiceUnavailableError{
				APIError: apiError,
			}
		},
		504: func(apiError *core.APIError) error {
			return &v2.GatewayTimeoutError{
				APIError: apiError,
			}
		},
	}

	var response *v2.V2RerankResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
